bmin, bmaj, bpa, omit_residuals, do_smooth
Add the CLEAN model to the residual map to form a clean map.
EXAMPLE
-------

0>restore 1.8, 6.1, 27
Restoring with beam: 1.8 x 6.1 at 27 degrees (North through East)
Clean map  min=-0.050992  max=3.324691 Jy/beam
0>

All but the first line are responses from the 'restore' command and
the client commands that it calls.

PARAMETERS
----------
bmin            -  The minor axis full-width-at-half-maximum of the
                   restoring beam (clean beam). Unless changed with
                   the mapunits command, the units are milli-arcsec.
                   If this is the only parameter specified then a
                   circular beam with bmaj=bmin and bpa=0 will be
                   assumed.

bmaj            -  The major axis full-width-at-half-maximum of the
                   restoring beam (clean beam). Unless changed with
                   the mapunits command, the units are milli-arcsec.

bpa             -  The position angle of the beam measured from north
                   going towards east. ie. a positive angle denotes an
                   anti-clockwise rotation on the map when displayed
                   by 'mapplot'. If this argument is omitted then 0
                   will be assumed.

omit_residuals  -  Default = false
                   Normally the clean model is superposed on top of
                   the residual map. Alternatively the residual map
                   can be omitted by specifying a value of true for
                   the omit_residuals argument. The result will be an
                   image of the clean model.

do_smooth       -  Default = true 
                   By default the residual map is smoothed with a
                   gaussian of width 3x3 pixels before the clean model
                   is added to it. This is a common way of
                   compensating for the fact that the model is
                   convolved with a smooth gaussian beam, while the
                   residual noise is convolved with the dirty beam. To
                   prevent this behavior specify a value of false for
                   the do_smooth argument.

If no parameters are specified 'restore' will either use the values
that were given to it the previous time it was invoked, or if the
weighting used by invert has been changed since the last 'restore',
'restore' will use the estimated beam size from the last time that
'invert' inverted the beam. Commands that force 'restore' to discard
the previous beam parameters and use the estimate from invert,
include: observe, uvtaper, uvrange, uvzero, uvweight.

To force restore to fall back on the estimated beam size generated by
the last invert, type

0> restore 0

Examples are:

0> restore 0   Always restores with the latest estimate from 'invert'.

0> restore     Uses whatever restore used last time unless the dirty
               beam produced by invert has been changed by changes in
               weigthing etc..

0> restore 1.5,3.2,-10.5   Restores with an elliptical beam of
                           bmin=1.5, bmaj=3.2 at -10.5 degrees.

0> restore 1.5      Restores with a circular beam of size 1.5.

0> restore 1.5,3.2  Restores with an ellipse of major-axis position angle 0.


CONTEXT
-------
This is usually the final step in mapping a source. It can also be done
at any time while mapping, but since it over-writes the current
residual map you will incur the overhead of re-inverting the UV data
on the next clean.

Restore generates an image of the CLEAN-model components convolved
with an elliptical gaussian beam and adds this to the current residual
map. This is the final map.

After restoring the map, it may be displayed with mapplot (the first
argument to mapplot must be cln). 'mapplot' allows contours to be plotted
on restored maps and will also plot a shaded representation of the
restoring beam in one corner.

For example:

0> mapplot cln

This plots the restored map. Note that if the map isn't restored when
you type this or the UV data has been changed since you restore'd,
mapplot will call restore for you with no arguments. Also note that if
you neglect to write cln as the first argument to mapplot, then mapplot
will assume that you want to plot the residual map and will re-invert
it for you - take care!

SIDE EFFECTS
------------
Since the restored map over-writes the residual map array, the
residual map is thereafter useless for continued cleaning and will
be re-inverted by the next clean. This saves memory at the expense of
CPU time.
